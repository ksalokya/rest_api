const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require('mongoose');

mongoose.connect("mongodb://localhost:27017/wikiDB",{useNewUrlParser: true, useUnifiedTopology: true});

const app = express();

app.set('view engine', 'ejs');

app.use(bodyParser.urlencoded({
  extended: true
}));
app.use(express.static("public"));

const articleSchema = new mongoose.Schema({
  title:String,
  content:String
})

const Article = new mongoose.model("Article",articleSchema)



app.route("/articles")
//--------------GET ROUTE-----------------
.get((req,res)=>{
  Article.find({},(err,foundArticles)=>{
    if (!err) {
      res.send(foundArticles);
    }
    else{
      res.send(err);
    }
  })
})
//--------------POST ROUTE-----------------
.post((req,res)=>{
  const newArticle = new Article({
    title : req.body.title,
    content : req.body.content
  })
  newArticle.save((err)=>{
    if (!err) {
      res.send("Successfully added a new article.")
    }else{
      res.send(err);
    }
  });
})
//--------------DELETE ROUTE-----------------
.delete((req,res)=>{
  Article.deleteMany({},(err)=>{
    if (!err) {
      res.send("Successfully deleted all articles");
    }else{
      res.send(err);
    }
  });
});

//--------------requesting specific article
app.route("/articles/:articleTitle")

.get((req,res)=>{
    Article.find({title:req.params.articleTitle},(err,foundArticle)=>{
      if (foundArticle.length) {
        res.send(foundArticle);
      }else{
        res.send("No matching article found!");
      }
    });
  })
  .put((req,res)=>{
    Article.update(
      {title:req.params.articleTitle},
      {title:req.body.title, content:req.body.content},
      {overwrite:true},
      (err)=>{
        if(!err){
          res.send("Updated Successfully")
        }
      }
    );
  })
  .patch((req,res)=>{
    Article.update(
      {title:req.params.articleTitle},
      {$set : req.body},
      (err)=>{
        if(!err){
          res.send("Patched Successfully")
        }
      }
    );
  })
  .delete((req,res)=>{
    Article.deleteOne({title:req.params.articleTitle},(err)=>{
      if (!err) {
        res.send("Successfully deleted " +req.params.articleTitle+ " article");
      }else{
        res.send(err);
      }
    })
  });





app.listen(3000, function() {
  console.log("Server started on port 3000");
});
